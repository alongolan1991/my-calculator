{"version":3,"sources":["constants.js","assets/backspace.png","components/UI/Icon/Icon.js","components/Screen/Screen.js","components/UI/Button/Button.js","components/Keypad/Keypad.js","serviceWorker.js","index.js","App.js"],"names":["commands","AC","equal","backspace","operators","plus","minus","devide","multiply","parenthesis","opening","closing","digits","zero","one","two","three","four","five","six","seven","eight","nine","dot","mod","module","exports","StyledIcon","styled","img","Icon","icon","onClick","src","Container","div","MathExpression","h2","Result","props","error","Screen","expression","result","onBackspaceClick","constants","backSpaceIcon","button","Button","className","value","OperatorButton","EqualSignButton","Keypad","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","mathExpression","finishedCalculation","buttonClickedHandler","command","setResult","reset","backSpace","updateScreen","newState","isNumber","setState","nextChar","getNextChar","tempExpression","tempMathExpression","slice","length","tempResult","eval","toString","console","log","lastExpressionChar","dotFlag","split","forEach","el","Object","values","includes","openParenthesis","number","isNaN","Calculator","this","Component"],"mappings":"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","file":"static/js/main.6c890f0e.chunk.js","sourcesContent":["export const commands = {\r\n  AC: \"AC\",\r\n  equal: \"=\",\r\n  backspace: \"BACKSPACE\"\r\n};\r\n\r\nexport const operators = {\r\n  plus: \"+\",\r\n  minus: \"-\",\r\n  devide: \"/\",\r\n  multiply: \"*\"\r\n};\r\n\r\nexport const parenthesis = {\r\n  opening: \"(\",\r\n  closing: \")\"\r\n};\r\nexport const digits = {\r\n  zero : \"0\",\r\n  one: \"1\",\r\n  two: \"2\",\r\n  three: \"3\",\r\n  four: \"4\",\r\n  five: \"5\",\r\n  six: \"6\",\r\n  seven: \"7\",\r\n  eight: \"8\",\r\n  nine: \"9\"\r\n};\r\n\r\nexport const dot = \".\";\r\nexport const mod = \"%\";\r\n","module.exports = __webpack_public_path__ + \"static/media/backspace.f5913285.png\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Icon = ({ icon, onClick }) => {\r\n  return <StyledIcon onClick={onClick} src={icon}></StyledIcon>;\r\n};\r\n\r\nconst StyledIcon = styled.img`\r\n  width: 32px;\r\n  height: 32px;\r\n  display: inline-block;\r\n`;\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Icon from \"../UI/Icon/Icon\";\r\nimport backSpaceIcon from \"../../assets/backspace.png\";\r\nimport * as constants from \"../../constants\";\r\n\r\nconst Screen = ({ expression, result, onBackspaceClick }) => {\r\n  return (\r\n    <Container>\r\n      <Icon\r\n        onClick={() => onBackspaceClick(constants.commands.backspace)}\r\n        icon={backSpaceIcon}\r\n      />\r\n      <MathExpression>{expression}</MathExpression>\r\n      <Result error={result === \"error\"}>{result}</Result>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 200px;\r\n  padding: 20px;\r\n  background-color: #edebe6;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\n\r\nconst MathExpression = styled.h2`\r\n  flex: 1;\r\n  font-weight: bold;\r\n  margin: 0;\r\n`;\r\n\r\nconst Result = styled.h2`\r\n  flex: 1;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  color: ${props => (props.error ? \"red\" : \"black\")};\r\n`;\r\n\r\nexport default Screen;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = ({ onClick, className, value }) => {\r\n  return (\r\n    <Container className={className} onClick={() => onClick(value)}>\r\n      {value}\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.button`\r\n  width: 25%;\r\n  height: 20%;\r\n  padding: 3px;\r\n  border: none;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  box-sizing: border-box;\r\n  background-color: white;\r\n  color: black;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    background-color: rgba(255, 134, 51, 0.3);\r\n  }\r\n\r\n  &:active {\r\n    background-color: rgba(255, 134, 51, 0.7);\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"../UI/Button/Button\";\r\nimport * as constants from '../../constants'\r\n\r\nconst Keypad = ({ onClick }) => {\r\n  return (\r\n    <Container>\r\n      <Button value={constants.commands.AC} onClick={onClick} />\r\n      <Button value={constants.parenthesis.opening} onClick={onClick} />\r\n      <Button value={constants.parenthesis.closing} onClick={onClick} />\r\n      <OperatorButton value={constants.operators.devide} onClick={onClick} />\r\n      <Button value={constants.digits.seven} onClick={onClick} />\r\n      <Button value={constants.digits.eight} onClick={onClick} />\r\n      <Button value={constants.digits.nine} onClick={onClick} />\r\n      <OperatorButton value={constants.operators.multiply} onClick={onClick} />\r\n      <Button value={constants.digits.four} onClick={onClick} />\r\n      <Button value={constants.digits.five} onClick={onClick} />\r\n      <Button value={constants.digits.six} onClick={onClick} />\r\n      <OperatorButton value={constants.operators.minus} onClick={onClick} />\r\n      <Button value={constants.digits.one} onClick={onClick} />\r\n      <Button value={constants.digits.two} onClick={onClick} />\r\n      <Button value={constants.digits.three} onClick={onClick} />\r\n      <OperatorButton value={constants.operators.plus} onClick={onClick} />\r\n      <Button value={constants.digits.zero} onClick={onClick} />\r\n      <Button value={constants.dot} onClick={onClick} />\r\n      <Button value={constants.mod} onClick={onClick} />\r\n      <EqualSignButton value={constants.commands.equal} onClick={onClick} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 400px;\r\n  border-top: 1px solid black;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst OperatorButton = styled(Button)`\r\n  color: #ffd133;\r\n`;\r\n\r\nconst EqualSignButton = styled(Button)`\r\n  background-color: #ffd133;\r\n  color: white;\r\n`;\r\n\r\nexport default Keypad;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport Screen from \"./components/Screen/Screen\";\nimport Keypad from \"./components/Keypad/Keypad\";\nimport * as constants from \"./constants\";\n\nclass App extends Component {\n  state = {\n    mathExpression: \"\",\n    result: \"0\",\n    finishedCalculation: false // determines if to start a new expression or continue constructing result\n  };\n\n  buttonClickedHandler = command => {\n    switch (command) {\n      case constants.commands.equal: {\n        this.setResult();\n        break;\n      }\n      case constants.commands.AC: {\n        this.reset();\n        break;\n      }\n      case constants.commands.backspace: {\n        this.backSpace();\n        break;\n      }\n      default: {\n        this.updateScreen(command); // all other command go here!!\n      }\n    }\n  };\n\n  updateScreen = command => {\n    let newState = { finishedCalculation: false };\n    if (this.state.finishedCalculation && this.isNumber(command)) {\n      newState = { ...newState, mathExpression: \"\", result: 0 };\n    }\n    this.setState(newState, () => {\n      const nextChar = this.getNextChar(command); // determine next char to append\n      if (nextChar !== \"\") {\n        let tempExpression = this.state.mathExpression;\n        tempExpression = `${tempExpression}${nextChar}`;\n        this.setState({ mathExpression: tempExpression });\n      }\n    });\n  };\n\n  // restart the calculator after AC button clicked\n  reset = () => {\n    this.setState({\n      mathExpression: \"\",\n      result: 0,\n      finishedCalculation: false\n    });\n  };\n\n  // delete the last char from mathExpression after backspace button clicked\n  backSpace = () => {\n    let tempMathExpression = this.state.mathExpression.slice(0, -1);\n    this.setState({ mathExpression: tempMathExpression });\n  };\n\n  // calculate the mathExpression & update the result\n  setResult = () => {\n    if (this.state.mathExpression.length === 0) {\n      return;\n    }\n    try {\n      // eslint-disable-next-line\n      const tempResult = eval(this.state.mathExpression);\n      this.setState({\n        result: tempResult,\n        mathExpression: tempResult.toString(),\n        finishedCalculation: true\n      });\n    } catch (error) {\n      console.log(error);\n      this.setState({ result: \"error\", finishedCalculation: true });\n    }\n  };\n\n  // determine the next char/characters to append\n  getNextChar = command => {\n    let nextChar = command;\n    const { mathExpression } = this.state;\n    const lastExpressionChar = mathExpression[mathExpression.length - 1];\n    \n    // if the first command is \".\" so add 0 to begin\n    if (mathExpression === \"\" && command === constants.dot) {\n      nextChar = `${constants.digits.zero}${constants.dot}`;\n    }\n    // check if the first command is \"* / 0\"\n    if (\n      mathExpression === \"\" &&\n      (command === constants.operators.multiply || command === constants.operators.devide || command === constants.digits.zero)\n    ) {\n      nextChar = \"\";\n    }\n    // check if \"(\" comes after a number and if does not add \"*\"\n    if (this.isNumber(lastExpressionChar) && command === constants.parenthesis.opening) {\n      nextChar = `${constants.operators.multiply}${constants.parenthesis.opening}`;\n    }\n    // check if number comes after \")\" and if it does add \"*\"\n    if (lastExpressionChar === constants.parenthesis.closing && this.isNumber(command)) {\n      nextChar = `${constants.operators.multiply}${command}`;\n    }\n    // check if that there is only 1 dot in single number\n    if (command === constants.dot) {\n      let dotFlag = false;\n      mathExpression.split(\"\").forEach(el => {\n        if (el === constants.dot) {\n          dotFlag = true;\n        }\n        if (Object.values(constants.operators).includes(el)) {\n          dotFlag = false;\n        }\n      });\n      if (dotFlag) {\n        nextChar = \"\";\n      }\n    }\n    // check if multiple ** or // or */ or /* or +/ or */\n    if (\n      (lastExpressionChar === constants.operators.multiply && (command === constants.operators.devide || command === constants.operators.multiply)) ||\n      (lastExpressionChar === constants.operators.devide && (command === constants.operators.devide || command === constants.operators.multiply)) ||\n      (lastExpressionChar === constants.operators.plus &&\n        (command === constants.operators.devide || command === constants.operators.multiply || command === constants.operators.plus)) ||\n      (lastExpressionChar === constants.operators.minus &&\n        (command === constants.operators.devide || command === constants.operators.multiply || command === constants.operators.minus))\n    ) {\n      nextChar = \"\";\n    }\n    // check if the operator \"*,/,+,-\" come before \")\"\n    if (command === constants.parenthesis.closing) {\n      if (Object.values(constants.operators).includes(lastExpressionChar)) {\n        nextChar = \"\";\n      }\n      // validate parenthesis\n      let openParenthesis = 0;\n      mathExpression.split(\"\").forEach(el => {\n        if (el === constants.parenthesis.opening) {\n          openParenthesis++;\n        }\n        if (el === constants.parenthesis.closing) {\n          openParenthesis--;\n        }\n      });\n      if (openParenthesis <= 0) {\n        nextChar = \"\";\n      }\n    }\n    // check if after '(' not come '),*,/' imiddate;\n    if (\n      lastExpressionChar === constants.parenthesis.opening &&\n      (command === constants.parenthesis.closing || command === constants.operators.multiply || command === constants.operators.devide)\n    ) {\n      nextChar = \"\";\n    }\n    // check if before modolu we have number\n    if (command === constants.mod && !this.isNumber(lastExpressionChar)) {\n      nextChar = \"\";\n    }\n    // check if the maximum length of the math expression greater then 23 chars\n    if (this.state.mathExpression.length >= 23) {\n      nextChar = \"\";\n    }\n    return nextChar;\n  };\n\n  isNumber = number => {\n    return !isNaN(number);\n  };\n\n  render() {\n    return (\n      <Calculator>\n        <Screen\n          onBackspaceClick={this.buttonClickedHandler}\n          expression={this.state.mathExpression}\n          result={this.state.result}\n        />\n        <Keypad onClick={this.buttonClickedHandler} />\n      </Calculator>\n    );\n  }\n}\n\nconst Calculator = styled.div`\n  width: 360px;\n  height: 600px;\n  border: 1px solid black;\n  margin: 5% auto;\n`;\n\nexport default App;"],"sourceRoot":""}